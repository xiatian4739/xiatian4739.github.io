<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C语言贪吃蛇</title>
      <link href="/2020/04/24/C%E8%AF%AD%E8%A8%80%E8%B4%AA%E5%90%83%E8%9B%87/"/>
      <url>/2020/04/24/C%E8%AF%AD%E8%A8%80%E8%B4%AA%E5%90%83%E8%9B%87/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言贪吃蛇-Easxy图形库编写贪"><a href="#C语言贪吃蛇-Easxy图形库编写贪" class="headerlink" title="C语言贪吃蛇-Easxy图形库编写贪"></a>C语言贪吃蛇-Easxy图形库编写贪</h1><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>此游戏需要Easyx图形库，没有图形库去百度上搜索<br>目前还没有遇到Bug,此游戏还差一功能从文件里面读取最高分数。目前不想做。<br>游戏没有加入重新开始，一站到底<br><strong>截图</strong><br><img src="/images/tcs/jt.png" alt="截图" title="截图">  </p><p><strong>游戏思路</strong><br>这里利用头插法让蛇移动起来：</p><p>蛇头坐标等于食物那就继续移动，反之释放掉尾巴</p><p><img src="/images/tcs/sl.png" alt="思路" title="思路"></p><ul><li><p>开始选择速度等级，然后在改变main.ccp里面Sleep(所对应的速度等级的值);来达到蛇移动速度的快慢</p></li><li><p>让蛇移动起来坐标不断的++/–达到蛇的移动,检测蛇头的坐标和食物坐标是不是相同</p></li><li><p>如果相同那就分数++,然后调用食物生成函数，重新生成食物位置而且食物位置与蛇坐标不相同。</p></li><li><p>判断蛇头的坐标和蛇坐标的身体坐标是不是相等，如果相等那就证明蛇咬到自己了，结束游戏！</p></li></ul><p><strong>Sanke.h</strong></p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">pragma</span> once</span><span class="token macro property">#<span class="token directive keyword">define</span> Widht 900            </span><span class="token comment" spellcheck="true">//界面的宽，高</span><span class="token macro property">#<span class="token directive keyword">define</span> Hight  500 </span><span class="token macro property">#<span class="token directive keyword">define</span> sankeRadius 5            </span><span class="token comment" spellcheck="true">//蛇的半径</span><span class="token macro property">#<span class="token directive keyword">define</span> Initlength     3                </span><span class="token comment" spellcheck="true">//蛇的初始长度</span><span class="token comment" spellcheck="true">/************************************    项目：贪吃蛇；    图形工具：Easxy************************************/</span><span class="token keyword">enum</span> dir            <span class="token comment" spellcheck="true">//用于设置蛇的方向</span><span class="token punctuation">{</span>    UP <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> Down <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> Right <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> Left <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设计蛇结构</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Sanke<span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//蛇的坐标</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span>    <span class="token keyword">bool</span> sankeHead<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//用于判断是不是蛇头，是蛇头那蛇头变成红色，不是那就黄色</span>    dir move<span class="token punctuation">;</span>    <span class="token keyword">struct</span> Sanke<span class="token operator">*</span> next<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//下一节身体</span><span class="token punctuation">}</span>Sanke<span class="token punctuation">,</span><span class="token operator">*</span>pSanke<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设计食物结构</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> food<span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//食物坐标</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span>Food<span class="token punctuation">,</span><span class="token operator">*</span>pFood<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化</span> <span class="token keyword">void</span> <span class="token function">initSanke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//画出界面</span><span class="token keyword">void</span> <span class="token function">showsanke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//游戏结束</span><span class="token keyword">void</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//按键检测</span><span class="token keyword">void</span> <span class="token function">key_input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//蛇移动</span><span class="token keyword">void</span> <span class="token function">movesanke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断食物情况</span><span class="token keyword">void</span> <span class="token function">food</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>#sanke.cpp</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">pragma</span> once</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Sanke.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;graphics.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;conio.h></span></span><span class="token keyword">int</span> speed<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//用于连接头->next = 蛇头</span>pSanke Headsanke<span class="token punctuation">,</span> sanke<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//sanke用于临时用的。可以不用到时候创建一个就可以。</span>pFood  sankefood<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//创建食物变量</span><span class="token keyword">int</span> score<span class="token punctuation">;</span>                                    <span class="token comment" spellcheck="true">//记录分数</span><span class="token keyword">bool</span> ply<span class="token punctuation">;</span>                                    <span class="token comment" spellcheck="true">//用于判断游戏是否结束</span><span class="token keyword">char</span> Text_Game<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//这个变量用于存字符串用于打印到屏幕上</span><span class="token comment" spellcheck="true">//打印信息        </span><span class="token comment" spellcheck="true">//这函数好好看参数，一句话就是给定坐标打印传入的字符串，按照传入的颜色打印</span><span class="token keyword">void</span> <span class="token function">showPrint</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> top<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span> bottom<span class="token punctuation">,</span> <span class="token keyword">char</span> Text<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> COLORREF color<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">settextcolor</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 在屏幕中央输出字符串                //以下函数去Easxy帮助文档进行了解</span>    RECT r <span class="token operator">=</span> <span class="token punctuation">{</span> left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> right <span class="token punctuation">,</span> bottom <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">drawtext</span><span class="token punctuation">(</span><span class="token function">_T</span><span class="token punctuation">(</span>Text<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">,</span> DT_CENTER <span class="token operator">|</span> DT_VCENTER <span class="token operator">|</span> DT_SINGLELINE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//加速等级  这很好理解就不过多解释</span><span class="token keyword">void</span> <span class="token function">initSpeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> te<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"    请选择游戏速度: 慢 A  中 S  快 D ！\n"</span><span class="token punctuation">;</span>    <span class="token function">showPrint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">639</span><span class="token punctuation">,</span> <span class="token number">479</span><span class="token punctuation">,</span> te<span class="token punctuation">,</span> RED<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//选择速度 慢，中，快</span>    <span class="token keyword">char</span> sp<span class="token punctuation">;</span>    sp <span class="token operator">=</span> <span class="token function">_getch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>sp<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'A'</span><span class="token operator">:</span>    <span class="token keyword">case</span> <span class="token string">'a'</span><span class="token operator">:</span>        speed <span class="token operator">=</span> <span class="token number">260</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//这里值的改变会影响主函数里的Sleep();速度</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'S'</span><span class="token operator">:</span>    <span class="token keyword">case</span> <span class="token string">'s'</span><span class="token operator">:</span>        speed <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'D'</span><span class="token operator">:</span>    <span class="token keyword">case</span> <span class="token string">'d'</span><span class="token operator">:</span>        speed <span class="token operator">=</span> <span class="token number">55</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//初始化</span><span class="token keyword">void</span> <span class="token function">initSanke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//种子</span>    <span class="token comment" spellcheck="true">//对变量初始化</span>    score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    speed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    ply <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    Headsanke <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>                                    sanke <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    Headsanke <span class="token operator">=</span> <span class="token punctuation">(</span>pSanke<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Sanke<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//给连接头分配空间</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Headsanke <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//判断内存分配是否成功</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//默认给定蛇出生的坐标</span>    <span class="token keyword">int</span> sanke_x<span class="token punctuation">,</span> sanke_y<span class="token punctuation">;</span>    sanke_x <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    sanke_y <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Initlength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//Initlength(宏定义) 蛇的初始长度 </span>    <span class="token punctuation">{</span>        pSanke Newsanke <span class="token operator">=</span> <span class="token punctuation">(</span>pSanke<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Sanke<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Newsanke <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//判断内存分配是否成功</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//第一个节点到最后会变成蛇的尾巴，因为是头插法，</span>        <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">//所以用sanke指向他，然后最后让尾巴->next = NULL</span>            sanke <span class="token operator">=</span> Newsanke<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Newsanke<span class="token operator">-</span><span class="token operator">></span>x <span class="token operator">=</span> sanke_x<span class="token punctuation">;</span>        Newsanke<span class="token operator">-</span><span class="token operator">></span>y <span class="token operator">=</span> sanke_y<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//因为蛇的默认方向是----></span>        <span class="token comment" spellcheck="true">//所以只加x的值y值不要动，因为蛇的半径是5所以直径是10</span>        sanke_x <span class="token operator">=</span> sankeRadius<span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> sanke_x<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//因为目前不知道哪个是蛇头所以设置成false , sankeHead = false;</span>        Newsanke<span class="token operator">-</span><span class="token operator">></span>sankeHead <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//下面两步看不懂的，建议画图，</span>        Newsanke<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> Headsanke<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>                Headsanke<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> Newsanke<span class="token punctuation">;</span>                            <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//连接头->蛇头 ， 所以把sankeHead = true， 因为要蛇头为红色，蛇身为黄色</span>    Headsanke<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>sankeHead <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//蛇的默认方向---></span>    Headsanke<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>move <span class="token operator">=</span> Right<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这里在上面保留了蛇尾巴， 让尾巴->next = MULL;</span>    sanke<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调用初始化食物</span>    <span class="token function">food</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调用初始化速度</span>    <span class="token function">initSpeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//食物生成</span><span class="token keyword">void</span> <span class="token function">food</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//种子</span>        sankefood <span class="token operator">=</span> <span class="token punctuation">(</span>pFood<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Food<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//给食物分配空间</span>        <span class="token keyword">bool</span> temp <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//循环条件</span>        <span class="token keyword">int</span> sankefood_x<span class="token punctuation">,</span> sankefood_y<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//食物坐标</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//因为有围墙食物的坐标不能和围墙相等，所以要加上围墙的宽度，</span>                <span class="token comment" spellcheck="true">//然后生成范围(15~(Widht-315)),总之要在围墙之内</span>                sankefood_x <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span>Widht<span class="token number">-315</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">15</span><span class="token punctuation">;</span>                        sankefood_y <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span>Hight <span class="token operator">-</span> <span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">15</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//这里因为蛇移动是要+10(直径)这样每次移动都是加10</span>                <span class="token comment" spellcheck="true">//坐标不会等于 如:123,343 这些坐标,如果是这些坐标，那蛇的坐标永远不会等于</span>                <span class="token comment" spellcheck="true">//这些坐标，也就意味着吃不了食物</span>                <span class="token comment" spellcheck="true">//所以食物坐标为10,20,30......,判断方法就是取出坐标的个位数判断是等于0</span>                <span class="token comment" spellcheck="true">//因为个位等于0，就证明这个是(10,110,20,440,30...)等</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sankefood_x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>sankefood_y <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            sanke <span class="token operator">=</span> Headsanke<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>sanke <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//判断食物坐标是否和蛇的坐标相同</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sanke<span class="token operator">-</span><span class="token operator">></span>x <span class="token operator">==</span> sankefood_x <span class="token operator">&amp;&amp;</span> sanke<span class="token operator">-</span><span class="token operator">></span>y <span class="token operator">==</span> sankefood_y<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    temp <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                sanke <span class="token operator">=</span> sanke<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//赋值给食物坐标</span>        sankefood<span class="token operator">-</span><span class="token operator">></span>x <span class="token operator">=</span> sankefood_x<span class="token punctuation">;</span>        sankefood<span class="token operator">-</span><span class="token operator">></span>y <span class="token operator">=</span> sankefood_y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//画蛇/食物</span><span class="token keyword">void</span> <span class="token function">showsanke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    pSanke p <span class="token operator">=</span> Headsanke<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//判断食物</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sankefood <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">setfillcolor</span><span class="token punctuation">(</span>LIGHTGREEN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setlinecolor</span><span class="token punctuation">(</span>LIGHTBLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fillcircle</span><span class="token punctuation">(</span>sankefood<span class="token operator">-</span><span class="token operator">></span>x<span class="token punctuation">,</span> sankefood<span class="token operator">-</span><span class="token operator">></span>y<span class="token punctuation">,</span> sankeRadius<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//这一步虽然有多此一举，但最好还是判断一下</span>    <span class="token comment" spellcheck="true">//判断是不是蛇头如果是那就蛇头为红色</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span>sankeHead <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">setfillcolor</span><span class="token punctuation">(</span>RED<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setlinecolor</span><span class="token punctuation">(</span>LIGHTBLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fillcircle</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span>x<span class="token punctuation">,</span> p<span class="token operator">-</span><span class="token operator">></span>y<span class="token punctuation">,</span> sankeRadius<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//画蛇身</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">setfillcolor</span><span class="token punctuation">(</span>YELLOW<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setlinecolor</span><span class="token punctuation">(</span>LIGHTBLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fillcircle</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span>x<span class="token punctuation">,</span> p<span class="token operator">-</span><span class="token operator">></span>y<span class="token punctuation">,</span> sankeRadius<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//打印围墙</span>    <span class="token function">settextcolor</span><span class="token punctuation">(</span>CYAN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Widht<span class="token number">-300</span><span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//打印上下</span>    <span class="token punctuation">{</span>        <span class="token function">outtextxy</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"■"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">outtextxy</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> Hight<span class="token number">-15</span><span class="token punctuation">,</span> <span class="token string">"■"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span>  i <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Hight<span class="token number">-25</span><span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//打印左右</span>    <span class="token punctuation">{</span>        <span class="token function">outtextxy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token string">"■"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">outtextxy</span><span class="token punctuation">(</span>Widht <span class="token operator">-</span> <span class="token number">300</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token string">"■"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//判断游戏是否结束,如果ply = false，那就不打印，去游戏结束里面打印</span>    <span class="token comment" spellcheck="true">//不懂sprintf 函数去百度查查</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ply<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">sprintf_s</span><span class="token punctuation">(</span>Text_Game<span class="token punctuation">,</span> <span class="token string">"当前分数为：%d"</span><span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">showPrint</span><span class="token punctuation">(</span>Widht<span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> Widht <span class="token operator">-</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> Text_Game<span class="token punctuation">,</span> CYAN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sprintf_s</span><span class="token punctuation">(</span>Text_Game<span class="token punctuation">,</span> <span class="token string">"按键: W ↑    S ↓    R →    A ←"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">showPrint</span><span class="token punctuation">(</span>Widht<span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> Widht <span class="token operator">-</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> Text_Game<span class="token punctuation">,</span> CYAN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//游戏结束</span><span class="token keyword">void</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ply <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token function">sprintf_s</span><span class="token punctuation">(</span>Text_Game<span class="token punctuation">,</span><span class="token string">" 游戏结束！当前分数为：%d"</span><span class="token punctuation">,</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">showPrint</span><span class="token punctuation">(</span>Widht<span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> Widht <span class="token operator">-</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> Text_Game<span class="token punctuation">,</span> RED<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">showsanke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//按键检测</span><span class="token keyword">void</span> <span class="token function">key_input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> key<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_kbhit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">//需要好好了解一下这个函数</span>    <span class="token punctuation">{</span>        key <span class="token operator">=</span> <span class="token function">_getch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token keyword">case</span><span class="token string">'w'</span><span class="token operator">:</span>        <span class="token keyword">case</span><span class="token string">'W'</span><span class="token operator">:</span>        <span class="token keyword">case</span> <span class="token number">72</span><span class="token operator">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Headsanke<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>move <span class="token operator">==</span> Down<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">//防止蛇回头下面一样</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            Headsanke<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>move <span class="token operator">=</span> UP<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span><span class="token string">'s'</span><span class="token operator">:</span>        <span class="token keyword">case</span><span class="token string">'S'</span><span class="token operator">:</span>        <span class="token keyword">case</span> <span class="token number">80</span><span class="token operator">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Headsanke<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>move <span class="token operator">==</span> UP<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            Headsanke<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>move <span class="token operator">=</span> Down<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span><span class="token string">'a'</span><span class="token operator">:</span>        <span class="token keyword">case</span><span class="token string">'A'</span><span class="token operator">:</span>        <span class="token keyword">case</span> <span class="token number">75</span><span class="token operator">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Headsanke<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>move <span class="token operator">==</span> Right<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            Headsanke<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>move <span class="token operator">=</span> Left<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span><span class="token string">'d'</span><span class="token operator">:</span>        <span class="token keyword">case</span><span class="token string">'D'</span><span class="token operator">:</span>        <span class="token keyword">case</span> <span class="token number">77</span><span class="token operator">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Headsanke<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>move <span class="token operator">==</span> Left<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            Headsanke<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>move <span class="token operator">=</span> Right<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//蛇移动</span><span class="token keyword">void</span> <span class="token function">movesanke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//保留头节点的坐标，等会移动生成新的节点要用到，</span>    <span class="token keyword">int</span> sanke_x <span class="token operator">=</span> Headsanke<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>x<span class="token punctuation">;</span>    <span class="token keyword">int</span> sanke_y <span class="token operator">=</span> Headsanke<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>y<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//移动判断，然后进行计算</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Headsanke<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>move <span class="token operator">==</span> UP <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Headsanke<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>y <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>Headsanke<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>move <span class="token operator">==</span> Down <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Headsanke<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>y <span class="token operator">+</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Headsanke<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>move <span class="token operator">==</span> Right<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Headsanke<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>x <span class="token operator">+</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Headsanke<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>move <span class="token operator">==</span> Left<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Headsanke<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>x <span class="token operator">-</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*    上面代码蛇头经过移动X,Y已经改变了，蛇脖子断了，所以生成新的节点填入刚刚保留的坐标，    这样脖子就连接上了，记住释放尾巴；    */</span>    pSanke  Newsanke <span class="token operator">=</span> <span class="token punctuation">(</span>pSanke<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Sanke<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Newsanke<span class="token operator">-</span><span class="token operator">></span>x <span class="token operator">=</span> sanke_x<span class="token punctuation">;</span>                                                <span class="token comment" spellcheck="true">//脖子（新的节点）的坐标</span>    Newsanke<span class="token operator">-</span><span class="token operator">></span>y <span class="token operator">=</span> sanke_y<span class="token punctuation">;</span>    Newsanke<span class="token operator">-</span><span class="token operator">></span>sankeHead <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    Newsanke<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> Headsanke<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//新的节点指向蛇头的脖子（下一个节点）</span>    Headsanke<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> Newsanke<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//把蛇头->next指向新的节点，这样就连接上了</span>    <span class="token comment" spellcheck="true">//判断蛇头是否碰到墙，因为打印了围墙因为围墙宽是15所以得从15开始判断</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Headsanke<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>x <span class="token operator">&lt;=</span><span class="token number">15</span> <span class="token operator">||</span> Headsanke<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>x <span class="token operator">>=</span> Widht<span class="token number">-300</span> <span class="token operator">||</span>         Headsanke<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>y <span class="token operator">&lt;=</span> <span class="token number">15</span> <span class="token operator">||</span> Headsanke<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>y <span class="token operator">>=</span> Hight<span class="token number">-25</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//碰到调用结束函数</span>        <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//判断蛇头是否和食物坐标相同</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> sankefood <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> sankefood<span class="token operator">-</span><span class="token operator">></span>x <span class="token operator">==</span> Headsanke<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>x <span class="token operator">&amp;&amp;</span>         sankefood<span class="token operator">-</span><span class="token operator">></span>y <span class="token operator">==</span> Headsanke<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>y<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//相同 调用食物函数，分数++</span>        score<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">food</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>            <span class="token comment" spellcheck="true">//如果不和食物相同那就判断蛇头是否和蛇身相同，用蛇头和每一节身体比较</span>    <span class="token punctuation">{</span>        pSanke p <span class="token operator">=</span> Headsanke<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//这里要是理解不了，可以进行调试进行查看或者画图</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>x <span class="token operator">==</span> Headsanke<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>x <span class="token operator">&amp;&amp;</span> p<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>y <span class="token operator">==</span> Headsanke<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>y<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            p <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//释放尾巴</span>        <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="主函数-main-cpp"><a href="#主函数-main-cpp" class="headerlink" title="主函数 main.cpp"></a>主函数 main.cpp</h1><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;graphics.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;conio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Sanke.h"</span></span><span class="token comment" spellcheck="true">/************************************    编译环境： vs2019    项目：贪吃蛇；    图形工具：Easxy************************************/</span><span class="token keyword">extern</span> <span class="token keyword">bool</span> ply<span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> speed<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">initgraph</span><span class="token punctuation">(</span>Widht<span class="token punctuation">,</span> Hight<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">initSanke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setbkcolor</span><span class="token punctuation">(</span>BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cleardevice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ply<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">cleardevice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">showsanke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">key_input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">movesanke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">showsanke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Sleep</span><span class="token punctuation">(</span>speed<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setorigin</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">_getwch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">closegraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><a href="https://blog.csdn.net/JBxiatian/article/details/103209345" target="_blank" rel="noopener">普通连接</a></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> Easxy </tag>
            
            <tag> vs2019 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
